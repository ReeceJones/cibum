"""Remove ingredientnutrient table

Revision ID: 3bf1ecd7a259
Revises: 1a1da57155fa
Create Date: 2024-08-09 18:31:34.506517

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "3bf1ecd7a259"
down_revision: Union[str, None] = "1a1da57155fa"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_ingredientnutrientoverride_archived",
        table_name="ingredientnutrientoverride",
    )
    op.drop_table("ingredientnutrientoverride")
    op.drop_index("ix_ingredientnutrient_archived", table_name="ingredientnutrient")
    op.drop_table("ingredientnutrient")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ingredientnutrientoverride",
        sa.Column(
            "ingredient_nutrient_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("organization_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "amount",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("unit", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("archived", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ingredient_nutrient_id"],
            ["ingredientnutrient.id"],
            name="ingredientnutrientoverride_ingredient_nutrient_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
            name="ingredientnutrientoverride_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["unit"], ["unit.id"], name="ingredientnutrientoverride_unit_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "ingredient_nutrient_id",
            "organization_id",
            name="ingredientnutrientoverride_pkey",
        ),
    )
    op.create_index(
        "ix_ingredientnutrientoverride_archived",
        "ingredientnutrientoverride",
        ["archived"],
        unique=False,
    )
    op.create_table(
        "ingredientnutrient",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("ingredient_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("nutrient_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("organization_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "amount",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("unit", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("archived", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["ingredient_id"],
            ["ingredient.id"],
            name="ingredientnutrient_ingredient_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["nutrient_id"], ["nutrient.id"], name="ingredientnutrient_nutrient_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
            name="ingredientnutrient_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["unit"], ["unit.id"], name="ingredientnutrient_unit_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="ingredientnutrient_pkey"),
    )
    op.create_index(
        "ix_ingredientnutrient_archived",
        "ingredientnutrient",
        ["archived"],
        unique=False,
    )
    # ### end Alembic commands ###
